
.main.main-content.col-lg-10.p-0.offset-sm-0.ml-3
  .main-content-container.container-fluid
    / Page Header
    .page-header.row.no-gutters.py-4
      .col-6.col-sm-4.text-center.text-sm-left.mb-0
        %span.text-uppercase.page-subtitle Overview
        %h3.page-title Add Payment
    .col-primary
      = simple_form_for("customer_payments", url: "/amortizations/process_pay", method: "post") do |f|
        .modal-body
          .container-fluid
            .row
              .col-md-6
                .field
                  -#= f.hidden_field "id", :value => "#{params[:id]}"
                  = f.label :customer, :class=>"text-muted"
                  = f.select "id", options_for_select(Amortization.all.order(:customer).collect{ |u| [u.customer, u.id]}),{:required => "true", prompt: 'Select Customer'}, :class=>"form-control", onchange: "javascript: check_if_paid_downpayment()", prompt: 'Select Person'
                .field.paid_downpayment
                  = f.label :payment, :class=>"text-muted"
                  = f.text_field :payment, :class=>"form-control", value: 0, onchange: "javascript: total_payment_penalty_others()"
                .field.paid_downpayment
                  = f.label :penalty, :class=>"text-muted"
                  = f.number_field :penalty, :class=>"form-control", value: 0, onchange: "javascript: total_payment_penalty_others()"
                .field.paid_downpayment
                  = f.label :others, :class=>"text-muted"
                  = f.number_field :others, :class=>"form-control", value: 0, onchange: "javascript: total_payment_penalty_others()"
                .field.paid_downpayment
                  = f.label :total, :class=>"text-muted"
                  = f.number_field :total, :class=>"form-control", value: 0, disabled: true
                .field
                  = f.label :mode_of_payment, :class=>"text-muted"
                  = f.select :mode_of_payment, options_for_select([["Cash"],["Check"]]), {}, :class=>"form-control"
                / .field
                /   = f.label :bank_account_id, :class=>"text-muted"
                /   = f.select :bank_account_id, options_for_select(BankAccount.all.order(:name).collect{ |u| [u.name, u.id]}), {:required => "true"}, :class=>"form-control"
                
                  
              .col-md-6
                .field
                  = f.label :or_num, :class=>"text-muted"
                  = f.text_field :or_num, :class=>"form-control",:required => "true"
                .field
                  = f.label :memo, :class=>"text-muted"
                  = f.text_field :memo, :class=>"form-control"
                 
                .field.unpaid_downpayment
                  = f.label "Downpayment Total: ", :class=>"text-danger"
                  %span#downpayment_total.text-sub
                  = f.label "Downpayment Balance: ", :class=>"text-danger"
                  %span#downpayment_balance.text-sub
                  %br
                  = f.label :pay_downpayment, :class=>"text-muted"
                  = f.number_field :downpayment, :class=>"form-control", value: 0

                .field.unpaid_processing_fee
                  = f.label "Processing Fee Total: ", :class=>"text-danger"
                  %span#processing_fee_total.text-sub
                  = f.label "Processing Fee Balance: ", :class=>"text-danger"
                  %span#processing_fee_balance.text-sub
                  %br
                  = f.label :processing_fee, :class=>"text-muted"
                  = f.number_field :processing_fee, :class=>"form-control", value: 0
                .field
                  = f.label :check_bank, :class=>"text-muted"
                  = f.text_field :check_bank, :class=>"form-control"
                .field
                  = f.label :check_no, :class=>"text-muted"
                  = f.text_field :check_no, :class=>"form-control"
                .field
                  = f.label :payment_date, :class=>"text-muted"
                  = f.date_field :payment_date, :class=>"form-control", :required => "true" 
        .modal-footer
          .actions
            = f.submit 'Save', :class=>"btn btn-sm btn-primary col-12 mt-3"


:javascript
  function total_payment_penalty_others(){
    sum = parseInt($("#customer_payments_payment").val()) + parseInt($("#customer_payments_penalty").val()) + parseInt($("#customer_payments_others").val())

    $("#customer_payments_total").val(sum);
  }

  function check_if_paid_downpayment(){
    $(".paid_downpayment").hide();
    $(".unpaid_downpayment").hide();

    $(".paid_processing_fee").hide();
    $(".unpaid_processing_fee").hide();

    $.ajax({
      url: "/amortizations/check_downpayment", // this will be routed
      type: 'GET',
      data: {
        customer: $("#customer_payments_id").val()
      },
      async: true,
      dataType: "json",
      error: function(XMLHttpRequest, errorTextStatus, error){
          alert("Failed: "+ errorTextStatus+" ;"+error);
      },
      success: function(ret){
        // here we iterate the json result
        if(ret['has_paid'] == true){ //downpayment not fully paid
          $(".paid_downpayment").hide();
          $("#downpayment_total").text(ret['downpayment']);
          $("#downpayment_balance").text(ret['balance']);
          $(".unpaid_downpayment").show();
        }

        if(ret['has_paid_processing']){
          $(".paid_downpayment").hide();
          $("#processing_fee_total").text(ret['processing_fee']);
          $("#processing_fee_balance").text(ret['processing_fee_balance']);
          $(".unpaid_processing_fee").show();
        }

        if(ret['balance'] == 0 && ret['processing_fee_balance'] == 0){
          $(".paid_downpayment").show();
        }
      }
    });
  }
  $(document).ready(function(){
    $(".paid_downpayment").hide();
    $(".unpaid_downpayment").hide();

    $(".paid_processing_fee").hide();
    $(".unpaid_processing_fee").hide();
  })